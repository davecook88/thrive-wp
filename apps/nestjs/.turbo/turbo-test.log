
> @thrive/api@0.0.1 test /Users/davidcook/personal/thrive-wp/apps/nestjs
> dotenv -e .env.test -- vitest run

 Vitest  "deps.inline" is deprecated. If you rely on vite-node directly, use "server.deps.inline" instead. Otherwise, consider using "deps.optimizer.ssr.include"

 RUN  v3.2.4 /Users/davidcook/personal/thrive-wp/apps/nestjs

stdout | test/app.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/app.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/payments-session-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/payments-session-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/credit-tiers-integration.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/credit-tiers-integration.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/group-class-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/group-class-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/teacher-availability.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/teacher-availability.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/waitlist.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/waitlist.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/database.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database.e2e.spec.ts > Database Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/app.e2e.spec.ts > AppController (e2e) > / (GET)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
[AppModule] Loaded 28 entities directly via import

stdout | test/app.e2e.spec.ts > AppController (e2e) > / (GET)
[AppModule] Loaded 28 entities directly via import

 ❯ test/app.e2e.spec.ts (1 test | 1 failed) 160ms
   × AppController (e2e) > / (GET) 160ms
     → getHttpServer is not defined
stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
[AppModule] Loaded 28 entities directly via import

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
[AppModule] Loaded 28 entities directly via import

stdout | test/database.e2e.spec.ts > Database Integration (e2e)
Running migrations...

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
[AppModule] Loaded 28 entities directly via import

stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
Running migrations...

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
Running migrations...

stdout | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
Running migrations...

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
Running migrations...

 ❯ test/waitlist.e2e.spec.ts (4 tests | 4 failed) 235ms
   × Waitlist (e2e) > should allow a student to join a waitlist for a full group class session 159ms
     → Table 'wordpress_test.course_enrollment' doesn't exist
   × Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full 24ms
     → Table 'wordpress_test.order_item' doesn't exist
   × Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified 23ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Waitlist (e2e) > admin can promote a student from the waitlist to a booking 29ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
stdout | test/database.e2e.spec.ts > Database Integration (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

 ❯ test/database.e2e.spec.ts (2 tests | 2 skipped) 293ms
   ↓ Database Integration (e2e) > should connect to test database
   ↓ Database Integration (e2e) > should have access to entities
stdout | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

 ❯ test/group-class-booking.e2e.spec.ts (3 tests | 3 skipped) 290ms
   ↓ Group Class Booking (e2e) > should create a group class, generate sessions, and see them as available
   ↓ Group Class Booking (e2e) > POST /bookings > should allow a student to book a group class session
   ↓ Group Class Booking (e2e) > POST /bookings > should not allow booking a full group class session
 ❯ test/payments-session-booking.e2e.spec.ts (8 tests | 8 skipped) 315ms
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > PRIVATE sessions > should create session and booking in a transaction
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > PRIVATE sessions > should fail if teacher availability validation fails
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should create booking for existing session
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should fail if student does not exist
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should fail if session type mismatch
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > COURSE sessions > should create booking for existing course session
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > Error handling > should handle missing student_id gracefully
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > Error handling > should handle invalid service type for session creation
stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

 ❯ test/teacher-availability.e2e.spec.ts (13 tests | 13 skipped) 328ms
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has ONE_OFF availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has RECURRING availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a blackout during requested time
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a conflicting booking
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher is inactive
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher does not exist
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has no availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability weekday does not match
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability time does not match
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should correctly exclude time slots that overlap with scheduled sessions
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should include full availability when no sessions are scheduled
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should exclude time slots that overlap with blackouts
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should handle multiple teachers with different availabilities and bookings
stdout | test/students-api.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/students-api.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/group-classes/group-classes.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/group-classes/group-classes.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/package-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/package-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/auth-google-start.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/auth-google-start.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database-connection.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/database-connection.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/teachers.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/teachers.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ❯ src/group-classes/group-classes.service.spec.ts (6 tests | 1 failed | 1 skipped) 19ms
   ✓ GroupClassesService > should be defined 8ms
   ↓ GroupClassesService > generateSessions > should parse RRULE strings correctly (skipped - rrule import issues in test)
   ✓ GroupClassesService > getAvailableSessions > should return sessions with enrollment count and computed fields 3ms
   ✓ GroupClassesService > getAvailableSessions > should apply level filter correctly 1ms
   ✓ GroupClassesService > getAvailableSessions > should apply teacher filter correctly 1ms
   × GroupClassesService > getAvailableSessions > should calculate availableSpots as capacityMax - enrolledCount 5ms
     → Cannot read properties of undefined (reading 'toISOString')
stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should generate correct preview windows for spanning rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m3[39m,
    startTimeMinutes: [33m1080[39m,
    endTimeMinutes: [33m1680[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T13:37:18.464Z[39m,
    updatedAt: [35m2025-10-22T13:37:18.464Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should generate correct preview windows for normal rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m1[39m,
    startTimeMinutes: [33m540[39m,
    endTimeMinutes: [33m1020[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T13:37:18.499Z[39m,
    updatedAt: [35m2025-10-22T13:37:18.499Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m3[39m,
    startTimeMinutes: [33m1080[39m,
    endTimeMinutes: [33m1680[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T13:37:18.500Z[39m,
    updatedAt: [35m2025-10-22T13:37:18.500Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days
Found availabilities: []

 ❯ src/teachers/teachers.service.spec.ts (11 tests) 33ms
   ✓ TeachersService > should be defined 12ms
   ✓ TeachersService > updateTeacherAvailability > should handle rules that span midnight 3ms
   ✓ TeachersService > updateTeacherAvailability > should handle normal rules without spanning 2ms
   ✓ TeachersService > updateTeacherAvailability > should handle exceptions that span midnight 1ms
   ✓ TeachersService > updateTeacherAvailability > should throw NotFoundException if teacher not found 3ms
   ✓ TeachersService > getTeacherAvailability > should return wrapped endTime for spanning rules 2ms
   ✓ TeachersService > previewTeacherAvailability > should generate correct preview windows for spanning rules 2ms
   ✓ TeachersService > previewTeacherAvailability > should generate correct preview windows for normal rules 1ms
   ✓ TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules 2ms
   ✓ TeachersService > previewTeacherAvailability > should throw NotFoundException if teacher not found 2ms
   ✓ TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days 1ms
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
Migrations complete.

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
MigrationTestDataSource destroyed.

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session
[AppModule] Loaded 28 entities directly via import

stdout | test/students-api.e2e.spec.ts > Students API (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | src/auth/auth.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/auth/auth.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/packages/packages.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/packages/packages.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database-connection.e2e.spec.ts > Database Connection (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/database-connection.e2e.spec.ts > Database Connection (e2e)
[AppModule] Loaded 28 entities directly via import

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
[AppModule] Loaded 28 entities directly via import

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
Running migrations...

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session
[AppModule] Loaded 28 entities directly via import

 ✓ test/database-connection.e2e.spec.ts (1 test) 175ms
 ✓ src/auth/auth.service.spec.ts (5 tests) 10ms
stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)
Running migrations...

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
Running migrations...

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session)
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages
[AppModule] Loaded 28 entities directly via import

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)
Migration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'

 ❯ test/package-booking.e2e.spec.ts (9 tests | 9 skipped) 219ms
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return student credits
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return 401 when user not authenticated
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should successfully book session with package credit
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package has no remaining sessions
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 404 when package not found
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package is expired
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 with invalid request body
   ↓ Package Booking (e2e) > POST /packages/:id/use > should successfully use package for session
   ↓ Package Booking (e2e) > Concurrency test > should handle concurrent package usage correctly
 ❯ test/students-api.e2e.spec.ts (3 tests | 3 skipped) 310ms
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should return upcoming sessions with correct teacher name
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should respect limit parameter
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should return empty array for student with no upcoming sessions
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions
[AppModule] Loaded 28 entities directly via import

 ✓ src/packages/packages.service.spec.ts (10 tests) 137ms
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly
[AppModule] Loaded 28 entities directly via import

stdout | src/users/users.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/users/users.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/waitlists/waitlists.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/waitlists/waitlists.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/sessions/services/sessions.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/sessions/services/sessions.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/app.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/app.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated
[AppModule] Loaded 28 entities directly via import

stdout | src/waitlists/waitlists.service.spec.ts > WaitlistsService > notifyWaitlistMember > should update notifiedAt and notificationExpiresAt fields
Notifying student 1 about opening in session 1

 ✓ src/users/users.service.spec.ts (10 tests) 19ms
stdout | src/waitlists/waitlists.service.spec.ts > WaitlistsService > handleBookingCancellation > should notify first waitlist member when booking is cancelled
Notifying student 1 about opening in session undefined

 ✓ src/waitlists/waitlists.service.spec.ts (11 tests) 18ms
stdout | src/common/types/credit-tiers.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/common/types/credit-tiers.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/app.controller.spec.ts (1 test) 7ms
 ✓ src/common/types/credit-tiers.spec.ts (54 tests) 4ms
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session
[AppModule] Loaded 28 entities directly via import

 ✓ src/sessions/services/sessions.service.spec.ts (8 tests) 13ms
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
[AppModule] Loaded 28 entities directly via import

stdout | src/payments/payments.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/payments/payments.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/common/types/class-types.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/common/types/class-types.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/common/types/class-types.spec.ts (3 tests) 2ms
stdout | src/teachers/entities/teacher.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/teachers/entities/teacher-availability.entity.spec.ts (4 tests) 3ms
 ✓ src/teachers/entities/teacher.entity.spec.ts (4 tests) 3ms
 ✓ src/payments/payments.controller.spec.ts (5 tests) 4ms
stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
Migrations complete.

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
MigrationTestDataSource destroyed.

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > stores same-origin redirect path when provided as absolute URL
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): http://localhost:8080/booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE
[Google Start] redirect query param: http://localhost:8080/booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE
[Google Start] Setting cookie for domain: localhost value: /booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:20.214Z[39m,
  updatedAt: [35m2025-10-22T13:37:20.214Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:20.214Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > preserves already-encoded query values without normalizing them
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): http://localhost:8080/booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z
[Google Start] redirect query param: http://localhost:8080/booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z
[Google Start] Setting cookie for domain: localhost value: /booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
[AppModule] Loaded 28 entities directly via import

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > ignores redirects for other origins
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): https://malicious.example/steal
[Google Start] redirect query param: https://malicious.example/steal

 ✓ test/auth-google-start.e2e.spec.ts (3 tests) 1375ms
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m, confirmed: [33mtrue[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:20.331Z[39m,
  updatedAt: [35m2025-10-22T13:37:20.331Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:20.331Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:20.624Z[39m,
  updatedAt: [35m2025-10-22T13:37:20.624Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:20.625Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m2[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:20.716Z[39m,
  updatedAt: [35m2025-10-22T13:37:20.716Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:20.717Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m, confirmed: [33mtrue[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:21.074Z[39m,
  updatedAt: [35m2025-10-22T13:37:21.074Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:21.075Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m, confirmed: [33mtrue[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:21.167Z[39m,
  updatedAt: [35m2025-10-22T13:37:21.167Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:21.168Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
[DEBUG] cancelBooking called for bookingId=1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:21.279Z[39m,
  updatedAt: [35m2025-10-22T13:37:21.279Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:21.280Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m2[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
[DEBUG] cancelBooking called for bookingId=1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:21.409Z[39m,
  updatedAt: [35m2025-10-22T13:37:21.409Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:21.410Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m2[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
[AppModule] Loaded 28 entities directly via import

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
bookWithPackage called with body: { packageId: [33m1[39m, sessionId: [33m1[39m }
Extracted userId from headers: 1

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
Booking result: Booking {
  id: [33m1[39m,
  createdAt: [35m2025-10-22T13:37:21.532Z[39m,
  updatedAt: [35m2025-10-22T13:37:21.532Z[39m,
  deletedAt: [1mnull[22m,
  sessionId: [33m1[39m,
  session: [90mundefined[39m,
  studentId: [33m1[39m,
  student: [90mundefined[39m,
  status: [32m'CONFIRMED'[39m,
  cancelledAt: [1mnull[22m,
  cancellationReason: [1mnull[22m,
  invitedAt: [1mnull[22m,
  acceptedAt: [35m2025-10-22T13:37:21.532Z[39m,
  studentPackageId: [33m1[39m,
  creditsCost: [33m1[39m,
  rescheduledCount: [33m0[39m,
  originalSessionId: [1mnull[22m,
  cancelledByStudent: [33mfalse[39m
}

 ❯ test/credit-tiers-integration.e2e.spec.ts (22 tests | 8 failed) 4022ms
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session 312ms
     → Table 'wordpress_test.course_teacher' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session 33ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session) 35ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages 104ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions 159ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly 207ms
     → Table 'wordpress_test.cancellation_policy' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated 144ms
     → Table 'wordpress_test.stripe_price_map' doesn't exist
   × Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session 306ms
     → Unknown column 'Teacher.avatar_url' in 'SELECT'
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package 229ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation 112ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation 91ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session 95ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit) 108ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit) 92ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits 83ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package 85ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session 94ms
   ✓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation 98ms
   ✓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking 102ms
   ✓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking 108ms
   ✓ Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit 135ms
   ✓ Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully 114ms

⎯⎯⎯⎯⎯⎯ Failed Suites 7 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  test/database.e2e.spec.ts > Database Integration (e2e)
 FAIL  test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
 FAIL  test/package-booking.e2e.spec.ts > Package Booking (e2e)
 FAIL  test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
 FAIL  test/students-api.e2e.spec.ts > Students API (e2e)
 FAIL  test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
QueryFailedError: Duplicate column name 'password_hash'
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/22]⎯

 FAIL  test/students-api.e2e.spec.ts > Students API (e2e)
TypeError: Cannot read properties of undefined (reading 'close')
 ❯ test/students-api.e2e.spec.ts:35:15
     33| 
     34|   afterAll(async () => {
     35|     await app.close();
       |               ^
     36|   });
     37| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/22]⎯

 FAIL  src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability
Error: No test found in suite previewTeacherAvailability
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/22]⎯


⎯⎯⎯⎯⎯⎯ Failed Tests 14 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  test/app.e2e.spec.ts > AppController (e2e) > / (GET)
ReferenceError: getHttpServer is not defined
 ❯ test/app.e2e.spec.ts:25:12
     23| 
     24|   it("/ (GET)", () => {
     25|     return request(getHttpServer(app))
       |            ^
     26|       .get("/")
     27|       .expect(200)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/22]⎯

 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session
QueryFailedError: Table 'wordpress_test.course_teacher' doesn't exist
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/22]⎯

 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session
 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session)
 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages
 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions
 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
QueryFailedError: Table 'wordpress_test.cancellation_policy' doesn't exist
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/22]⎯

 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated
QueryFailedError: Table 'wordpress_test.stripe_price_map' doesn't exist
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/22]⎯

 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session
QueryFailedError: Unknown column 'Teacher.avatar_url' in 'SELECT'
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/22]⎯

 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
QueryFailedError: Table 'wordpress_test.course_enrollment' doesn't exist
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/22]⎯

 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
QueryFailedError: Table 'wordpress_test.order_item' doesn't exist
 ❯ Query.onResult src/driver/mysql/MysqlQueryRunner.ts:247:33
 ❯ Query.execute node_modules/mysql2/lib/commands/command.js:36:14
 ❯ PoolConnection.handlePacket node_modules/mysql2/lib/base/connection.js:475:34
 ❯ PacketParser.onPacket node_modules/mysql2/lib/base/connection.js:93:12
 ❯ PacketParser.executeStart node_modules/mysql2/lib/packet_parser.js:75:16
 ❯ Socket.<anonymous> node_modules/mysql2/lib/base/connection.js:100:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/22]⎯

 FAIL  src/group-classes/group-classes.service.spec.ts > GroupClassesService > getAvailableSessions > should calculate availableSpots as capacityMax - enrolledCount
TypeError: Cannot read properties of undefined (reading 'toISOString')
 ❯ map src/group-classes/group-classes.service.ts:391:36
    389|           id: session.id,
    390|           type: session.type,
    391|           startAt: session.startAt.toISOString(),
       |                                    ^
    392|           endAt: session.endAt.toISOString(),
    393|           capacityMax: session.capacityMax,
 ❯ GroupClassesService.getAvailableSessions src/group-classes/group-classes.service.ts:386:21
 ❯ src/group-classes/group-classes.service.spec.ts:194:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/22]⎯


 Test Files  11 failed | 13 passed (24)
      Tests  14 failed | 148 passed | 39 skipped (201)
   Start at  07:37:15
   Duration  5.67s (transform 604ms, setup 7.32s, collect 10.60s, tests 7.99s, environment 2ms, prepare 1.37s)

 ELIFECYCLE  Test failed. See above for more details.
