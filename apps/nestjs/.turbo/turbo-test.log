
> @thrive/api@0.0.1 test /Users/davidcook/personal/thrive-wp/apps/nestjs
> dotenv -e .env.test -- vitest run

 Vitest  "deps.inline" is deprecated. If you rely on vite-node directly, use "server.deps.inline" instead. Otherwise, consider using "deps.optimizer.ssr.include"

 RUN  v3.2.4 /Users/davidcook/personal/thrive-wp/apps/nestjs

stdout | test/waitlist.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/packages/packages.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/packages/packages.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/app.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/app.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/auth-google-start.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/auth-google-start.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/waitlist.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database-connection.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/database-connection.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/teachers.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/teachers/teachers.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/teacher-availability.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/teacher-availability.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should generate correct preview windows for spanning rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m3[39m,
    startTimeMinutes: [33m1080[39m,
    endTimeMinutes: [33m1680[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T18:21:33.538Z[39m,
    updatedAt: [35m2025-10-22T18:21:33.538Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should generate correct preview windows for normal rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m1[39m,
    startTimeMinutes: [33m540[39m,
    endTimeMinutes: [33m1020[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T18:21:33.560Z[39m,
    updatedAt: [35m2025-10-22T18:21:33.560Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m3[39m,
    startTimeMinutes: [33m1080[39m,
    endTimeMinutes: [33m1680[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-22T18:21:33.561Z[39m,
    updatedAt: [35m2025-10-22T18:21:33.561Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days
Found availabilities: []

 ❯ src/teachers/teachers.service.spec.ts (11 tests) 26ms
   ✓ TeachersService > should be defined 8ms
   ✓ TeachersService > updateTeacherAvailability > should handle rules that span midnight 2ms
   ✓ TeachersService > updateTeacherAvailability > should handle normal rules without spanning 1ms
   ✓ TeachersService > updateTeacherAvailability > should handle exceptions that span midnight 1ms
   ✓ TeachersService > updateTeacherAvailability > should throw NotFoundException if teacher not found 2ms
   ✓ TeachersService > getTeacherAvailability > should return wrapped endTime for spanning rules 1ms
   ✓ TeachersService > previewTeacherAvailability > should generate correct preview windows for spanning rules 2ms
   ✓ TeachersService > previewTeacherAvailability > should generate correct preview windows for normal rules 1ms
   ✓ TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules 1ms
   ✓ TeachersService > previewTeacherAvailability > should throw NotFoundException if teacher not found 1ms
   ✓ TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days 4ms
 ❯ src/packages/packages.service.spec.ts (10 tests | 7 failed) 25ms
   ✓ PackagesService > should be defined 6ms
   × PackagesService > getActivePackagesForStudent > should return active packages for a student 7ms
     → Cannot read properties of undefined (reading 'createQueryBuilder')
   × PackagesService > getActivePackagesForStudent > should filter out expired packages 2ms
     → Cannot read properties of undefined (reading 'createQueryBuilder')
   × PackagesService > getActivePackagesForStudent > should filter out packages with no remaining sessions 1ms
     → Cannot read properties of undefined (reading 'createQueryBuilder')
   × PackagesService > usePackageForSession > should successfully use package for session with happy path 2ms
     → Cannot read properties of undefined (reading 'getMetadata')
   × PackagesService > usePackageForSession > should throw NotFoundException when package not found 2ms
     → expected error to be instance of NotFoundException
   × PackagesService > usePackageForSession > should throw BadRequestException when no remaining sessions 1ms
     → expected error to be instance of BadRequestException
   × PackagesService > usePackageForSession > should throw BadRequestException when package is expired 1ms
     → expected error to be instance of BadRequestException
   ✓ PackagesService > linkUseToBooking > should successfully link use to booking 2ms
   ✓ PackagesService > linkUseToBooking > should return null when use not found 1ms
stdout | src/group-classes/group-classes.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/group-classes/group-classes.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/credit-tiers-integration.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/credit-tiers-integration.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/database-connection.e2e.spec.ts > Database Connection (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/app.e2e.spec.ts > AppController (e2e) > / (GET)
[CONFIG] Test mode detected - Using database: wordpress_test

 ❯ test/database-connection.e2e.spec.ts (1 test | 1 skipped) 16ms
   ↓ Database Connection (e2e) > should initialize the app with test database
 ❯ test/auth-google-start.e2e.spec.ts (3 tests | 3 skipped) 17ms
   ↓ Auth Google Start Redirect (e2e) > stores same-origin redirect path when provided as absolute URL
   ↓ Auth Google Start Redirect (e2e) > preserves already-encoded query values without normalizing them
   ↓ Auth Google Start Redirect (e2e) > ignores redirects for other origins
 ❯ test/app.e2e.spec.ts (1 test | 1 failed) 26ms
   × AppController (e2e) > / (GET) 25ms
     → Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

     → Cannot read properties of undefined (reading 'close')
stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/teacher-availability.e2e.spec.ts (13 tests | 13 skipped) 5ms
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has ONE_OFF availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has RECURRING availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a blackout during requested time
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a conflicting booking
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher is inactive
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher does not exist
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has no availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability weekday does not match
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability time does not match
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should correctly exclude time slots that overlap with scheduled sessions
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should include full availability when no sessions are scheduled
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should exclude time slots that overlap with blackouts
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should handle multiple teachers with different availabilities and bookings
stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
[CONFIG] Test mode detected - Using database: wordpress_test

 ❯ test/waitlist.e2e.spec.ts (4 tests | 4 failed) 37ms
   × Waitlist (e2e) > should allow a student to join a waitlist for a full group class session 17ms
     → Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

     → Cannot read properties of undefined (reading 'close')
   × Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full 4ms
     → Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

     → Cannot read properties of undefined (reading 'close')
   × Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified 11ms
     → Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

     → Cannot read properties of undefined (reading 'close')
   × Waitlist (e2e) > admin can promote a student from the waitlist to a booking 3ms
     → Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

     → Cannot read properties of undefined (reading 'close')
 ❯ src/group-classes/group-classes.service.spec.ts (6 tests | 2 failed | 1 skipped) 20ms
   ✓ GroupClassesService > should be defined 10ms
   ↓ GroupClassesService > generateSessions > should parse RRULE strings correctly (skipped - rrule import issues in test)
   × GroupClassesService > getAvailableSessions > should return sessions with enrollment count and computed fields 5ms
     → session.teacher.toPublicDto is not a function
   ✓ GroupClassesService > getAvailableSessions > should apply level filter correctly 2ms
   ✓ GroupClassesService > getAvailableSessions > should apply teacher filter correctly 1ms
   × GroupClassesService > getAvailableSessions > should calculate availableSpots as capacityMax - enrolledCount 1ms
     → Cannot read properties of undefined (reading 'toISOString')
stdout | test/students-api.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/students-api.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/database.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/payments-session-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/payments-session-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/package-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/package-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/group-class-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | test/group-class-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/users/users.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/users/users.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/credit-tiers-integration.e2e.spec.ts (22 tests | 22 skipped) 6ms
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session)
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
   ↓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
   ↓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
   ↓ Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
   ↓ Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
 ✓ src/users/users.service.spec.ts (10 tests) 62ms
stdout | src/waitlists/waitlists.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/waitlists/waitlists.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/students-api.e2e.spec.ts > Students API (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/students-api.e2e.spec.ts > Students API (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/students-api.e2e.spec.ts (3 tests | 3 skipped) 6ms
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should return upcoming sessions with correct teacher name
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should respect limit parameter
   ↓ Students API (e2e) > GET /api/students/me/upcoming > should return empty array for student with no upcoming sessions
stdout | test/database.e2e.spec.ts > Database Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/database.e2e.spec.ts > Database Integration (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

 ❯ test/database.e2e.spec.ts (2 tests | 2 skipped) 7ms
   ↓ Database Integration (e2e) > should connect to test database
   ↓ Database Integration (e2e) > should have access to entities
stderr | test/package-booking.e2e.spec.ts > Package Booking (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/package-booking.e2e.spec.ts (9 tests | 9 skipped) 7ms
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return student credits
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return 401 when user not authenticated
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should successfully book session with package credit
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package has no remaining sessions
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 404 when package not found
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package is expired
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 with invalid request body
   ↓ Package Booking (e2e) > POST /packages/:id/use > should successfully use package for session
   ↓ Package Booking (e2e) > Concurrency test > should handle concurrent package usage correctly
stdout | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/payments-session-booking.e2e.spec.ts (8 tests | 8 skipped) 5ms
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > PRIVATE sessions > should create session and booking in a transaction
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > PRIVATE sessions > should fail if teacher availability validation fails
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should create booking for existing session
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should fail if student does not exist
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > GROUP sessions > should fail if session type mismatch
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > COURSE sessions > should create booking for existing course session
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > Error handling > should handle missing student_id gracefully
   ↓ PaymentsService.createSessionAndBookingFromMetadata (e2e) > createSessionAndBookingFromMetadata > Error handling > should handle invalid service type for session creation
stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000005][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m,
    [36m[class AddServiceTypeAndTeacherTierToStripeProductMap1762000000000][39m,
    [36m[class BundlePackagesMigration1762000000010][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stderr | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
Error during MigrationTestDataSource initialization: Error: connect ECONNREFUSED 127.0.0.1:3306
[90m    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)[39m {
  errno: [33m-61[39m,
  code: [32m'ECONNREFUSED'[39m,
  syscall: [32m'connect'[39m,
  address: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  fatal: [33mtrue[39m
}

 ❯ test/group-class-booking.e2e.spec.ts (3 tests | 3 skipped) 5ms
   ↓ Group Class Booking (e2e) > should create a group class, generate sessions, and see them as available
   ↓ Group Class Booking (e2e) > POST /bookings > should allow a student to book a group class session
   ↓ Group Class Booking (e2e) > POST /bookings > should not allow booking a full group class session
stdout | src/waitlists/waitlists.service.spec.ts > WaitlistsService > notifyWaitlistMember > should update notifiedAt and notificationExpiresAt fields
Notifying student 1 about opening in session 1

stdout | src/waitlists/waitlists.service.spec.ts > WaitlistsService > handleBookingCancellation > should notify first waitlist member when booking is cancelled
Notifying student 1 about opening in session undefined

 ✓ src/waitlists/waitlists.service.spec.ts (11 tests) 100ms
stdout | src/sessions/services/sessions.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/sessions/services/sessions.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/payments/payments.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/payments/payments.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/auth/auth.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/auth/auth.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/app.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/app.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/common/types/credit-tiers.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/common/types/credit-tiers.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/entities/teacher.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/teachers/entities/teacher-availability.entity.spec.ts (4 tests) 2ms
 ✓ src/sessions/services/sessions.service.spec.ts (8 tests) 19ms
 ✓ src/payments/payments.controller.spec.ts (5 tests) 4ms
 ✓ src/common/types/credit-tiers.spec.ts (54 tests) 4ms
 ✓ src/app.controller.spec.ts (1 test) 5ms
 ✓ src/teachers/entities/teacher.entity.spec.ts (4 tests) 2ms
 ✓ src/auth/auth.service.spec.ts (5 tests) 12ms
stdout | src/common/types/class-types.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 19 migrations directly (no file glob needed)

stdout | src/common/types/class-types.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m,
    SESSION_SECRET: [32m'test_session_secret_for_jwt_cookies'[39m,
    GOOGLE_CLIENT_ID: [32m'test-client-id'[39m,
    GOOGLE_CLIENT_SECRET: [32m'test-client-secret'[39m,
    GOOGLE_CALLBACK_URL: [32m'http://localhost:3000/auth/google/callback'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/common/types/class-types.spec.ts (3 tests) 2ms

⎯⎯⎯⎯⎯⎯ Failed Suites 10 ⎯⎯⎯⎯⎯⎯

 FAIL  test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
 FAIL  test/database-connection.e2e.spec.ts > Database Connection (e2e)
Error: Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

 ❯ TestingInjector.lookupComponentInParentModules node_modules/@nestjs/core/injector/injector.js:286:19
 ❯ TestingInjector.resolveComponentWrapper node_modules/@nestjs/testing/testing-injector.js:19:45
 ❯ resolveParam node_modules/@nestjs/core/injector/injector.js:141:38
 ❯ TestingInjector.resolveConstructorParams node_modules/@nestjs/core/injector/injector.js:169:27
 ❯ TestingInjector.loadInstance node_modules/@nestjs/core/injector/injector.js:75:13
 ❯ TestingInjector.loadProvider node_modules/@nestjs/core/injector/injector.js:103:9
 ❯ node_modules/@nestjs/core/injector/instance-loader.js:56:13

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/31]⎯

 FAIL  test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
TypeError: Cannot read properties of undefined (reading 'close')
 ❯ test/auth-google-start.e2e.spec.ts:43:15
     41| 
     42|   afterAll(async () => {
     43|     await app.close();
       |               ^
     44|   });
     45| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/31]⎯

 FAIL  test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
 FAIL  test/database.e2e.spec.ts > Database Integration (e2e)
 FAIL  test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
 FAIL  test/package-booking.e2e.spec.ts > Package Booking (e2e)
 FAIL  test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
 FAIL  test/students-api.e2e.spec.ts > Students API (e2e)
 FAIL  test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
Error: connect ECONNREFUSED 127.0.0.1:3306
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/31]⎯

 FAIL  test/students-api.e2e.spec.ts > Students API (e2e)
TypeError: Cannot read properties of undefined (reading 'close')
 ❯ test/students-api.e2e.spec.ts:35:15
     33| 
     34|   afterAll(async () => {
     35|     await app.close();
       |               ^
     36|   });
     37| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/31]⎯

 FAIL  src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability
Error: No test found in suite previewTeacherAvailability
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/31]⎯


⎯⎯⎯⎯⎯⎯ Failed Tests 14 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  test/app.e2e.spec.ts > AppController (e2e) > / (GET)
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
Error: Nest can't resolve dependencies of the BookingsService (BookingRepository, SessionRepository, StudentRepository, StudentPackageRepository, ?, PoliciesService, WaitlistsService). Please make sure that the argument "PackageUseRepository" at index [4] is available in the BookingsModule context.

Potential solutions:
- Is BookingsModule a valid NestJS module?
- If "PackageUseRepository" is a provider, is it part of the current BookingsModule?
- If "PackageUseRepository" is exported from a separate @Module, is that module imported within BookingsModule?
  @Module({
    imports: [ /* the Module containing "PackageUseRepository" */ ]
  })

 ❯ TestingInjector.lookupComponentInParentModules node_modules/@nestjs/core/injector/injector.js:286:19
 ❯ TestingInjector.resolveComponentWrapper node_modules/@nestjs/testing/testing-injector.js:19:45
 ❯ resolveParam node_modules/@nestjs/core/injector/injector.js:141:38
 ❯ TestingInjector.resolveConstructorParams node_modules/@nestjs/core/injector/injector.js:169:27
 ❯ TestingInjector.loadInstance node_modules/@nestjs/core/injector/injector.js:75:13
 ❯ TestingInjector.loadProvider node_modules/@nestjs/core/injector/injector.js:103:9
 ❯ node_modules/@nestjs/core/injector/instance-loader.js:56:13

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/31]⎯

 FAIL  test/app.e2e.spec.ts > AppController (e2e) > / (GET)
TypeError: Cannot read properties of undefined (reading 'close')
 ❯ test/app.e2e.spec.ts:21:15
     19| 
     20|   afterEach(async () => {
     21|     await app.close();
       |               ^
     22|   });
     23| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/31]⎯

 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should allow a student to join a waitlist for a full group class session
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > should not allow a student to join a waitlist for a session that is not full
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > when a booking is cancelled, the first student on the waitlist is notified
 FAIL  test/waitlist.e2e.spec.ts > Waitlist (e2e) > admin can promote a student from the waitlist to a booking
TypeError: Cannot read properties of undefined (reading 'close')
 ❯ test/waitlist.e2e.spec.ts:79:15
     77| 
     78|   afterEach(async () => {
     79|     await app.close();
       |               ^
     80|   });
     81| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/31]⎯

 FAIL  src/group-classes/group-classes.service.spec.ts > GroupClassesService > getAvailableSessions > should return sessions with enrollment count and computed fields
TypeError: session.teacher.toPublicDto is not a function
 ❯ map src/group-classes/group-classes.service.ts:407:36
    405|           isFull: session.enrolledCount >= session.capacityMax,
    406|           canJoinWaitlist: session.enrolledCount >= session.capacityMa…
    407|           teacher: session.teacher.toPublicDto(),
       |                                    ^
    408|         }) as SessionWithEnrollmentResponse,
    409|     );
 ❯ GroupClassesService.getAvailableSessions src/group-classes/group-classes.service.ts:384:21
 ❯ src/group-classes/group-classes.service.spec.ts:140:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/31]⎯

 FAIL  src/group-classes/group-classes.service.spec.ts > GroupClassesService > getAvailableSessions > should calculate availableSpots as capacityMax - enrolledCount
TypeError: Cannot read properties of undefined (reading 'toISOString')
 ❯ map src/group-classes/group-classes.service.ts:389:36
    387|           id: session.id,
    388|           type: session.type,
    389|           startAt: session.startAt.toISOString(),
       |                                    ^
    390|           endAt: session.endAt.toISOString(),
    391|           capacityMax: session.capacityMax,
 ❯ GroupClassesService.getAvailableSessions src/group-classes/group-classes.service.ts:384:21
 ❯ src/group-classes/group-classes.service.spec.ts:194:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > getActivePackagesForStudent > should return active packages for a student
TypeError: Cannot read properties of undefined (reading 'createQueryBuilder')
 ❯ Repository.createQueryBuilder src/repository/Repository.ts:82:29
 ❯ Function.buildActiveStudentPackagesQuery src/packages/utils/package-query-builder.ts:64:8
     62|   ): SelectQueryBuilder<StudentPackage> {
     63|     return repo
     64|       .createQueryBuilder("sp")
       |        ^
     65|       .leftJoinAndSelect("sp.uses", "uses", "uses.deleted_at IS NULL")
     66|       .where("sp.student_id = :studentId", { studentId })
 ❯ PackagesService.getActivePackagesForStudent src/packages/packages.service.ts:371:48
 ❯ src/packages/packages.service.spec.ts:110:36

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > getActivePackagesForStudent > should filter out expired packages
TypeError: Cannot read properties of undefined (reading 'createQueryBuilder')
 ❯ Repository.createQueryBuilder src/repository/Repository.ts:82:29
 ❯ Function.buildActiveStudentPackagesQuery src/packages/utils/package-query-builder.ts:64:8
     62|   ): SelectQueryBuilder<StudentPackage> {
     63|     return repo
     64|       .createQueryBuilder("sp")
       |        ^
     65|       .leftJoinAndSelect("sp.uses", "uses", "uses.deleted_at IS NULL")
     66|       .where("sp.student_id = :studentId", { studentId })
 ❯ PackagesService.getActivePackagesForStudent src/packages/packages.service.ts:371:48
 ❯ src/packages/packages.service.spec.ts:146:36

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > getActivePackagesForStudent > should filter out packages with no remaining sessions
TypeError: Cannot read properties of undefined (reading 'createQueryBuilder')
 ❯ Repository.createQueryBuilder src/repository/Repository.ts:82:29
 ❯ Function.buildActiveStudentPackagesQuery src/packages/utils/package-query-builder.ts:64:8
     62|   ): SelectQueryBuilder<StudentPackage> {
     63|     return repo
     64|       .createQueryBuilder("sp")
       |        ^
     65|       .leftJoinAndSelect("sp.uses", "uses", "uses.deleted_at IS NULL")
     66|       .where("sp.student_id = :studentId", { studentId })
 ❯ PackagesService.getActivePackagesForStudent src/packages/packages.service.ts:371:48
 ❯ src/packages/packages.service.spec.ts:176:36

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > usePackageForSession > should successfully use package for session with happy path
TypeError: Cannot read properties of undefined (reading 'getMetadata')
 ❯ Repository.get metadata [as metadata] src/repository/Repository.ts:54:40
 ❯ Repository.createQueryBuilder src/repository/Repository.ts:83:18
 ❯ Function.buildStudentPackageWithUsesQuery src/packages/utils/package-query-builder.ts:83:8
     81|   ): SelectQueryBuilder<StudentPackage> {
     82|     return repo
     83|       .createQueryBuilder("sp")
       |        ^
     84|       .leftJoinAndSelect("sp.uses", "uses", "uses.deleted_at IS NULL")
     85|       .where("sp.id = :packageId", { packageId })
 ❯ PackagesService.usePackageForSession src/packages/packages.service.ts:411:43
 ❯ src/packages/packages.service.spec.ts:249:36

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > usePackageForSession > should throw NotFoundException when package not found
AssertionError: expected error to be instance of NotFoundException

[32m- Expected:[39m 
[Function NotFoundException]

[31m+ Received:[39m 
TypeError {
  "message": "Cannot read properties of undefined (reading 'createQueryBuilder')",
}

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/31]⎯

 FAIL  src/packages/packages.service.spec.ts > PackagesService > usePackageForSession > should throw BadRequestException when no remaining sessions
 FAIL  src/packages/packages.service.spec.ts > PackagesService > usePackageForSession > should throw BadRequestException when package is expired
AssertionError: expected error to be instance of BadRequestException

[32m- Expected:[39m 
[Function BadRequestException]

[31m+ Received:[39m 
TypeError {
  "message": "Cannot read properties of undefined (reading 'createQueryBuilder')",
}

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/31]⎯


 Test Files  14 failed | 10 passed (24)
      Tests  14 failed | 122 passed | 65 skipped (201)
   Start at  12:21:32
   Duration  4.39s (transform 721ms, setup 8.59s, collect 14.45s, tests 420ms, environment 2ms, prepare 1.77s)

 ELIFECYCLE  Test failed. See above for more details.
