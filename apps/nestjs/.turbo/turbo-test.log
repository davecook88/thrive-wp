
> @thrive/api@0.0.1 test /Users/davidcook/personal/thrive-wp/apps/nestjs
> dotenv -e .env.test -- vitest run

 Vitest  "deps.inline" is deprecated. If you rely on vite-node directly, use "server.deps.inline" instead. Otherwise, consider using "deps.optimizer.ssr.include"

 RUN  v3.2.4 /Users/davidcook/personal/thrive-wp/apps/nestjs

stdout | src/auth/auth.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/auth/auth.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/users/users.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/users/users.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/payments-session-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/payments-session-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/teachers.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/teachers.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/credit-tiers-integration.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/credit-tiers-integration.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/group-class-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/group-class-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/common/types/credit-tiers.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/common/types/credit-tiers.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules
Found availabilities: [
  {
    id: [33m1[39m,
    teacherId: [33m1[39m,
    kind: [32m'RECURRING'[39m,
    weekday: [33m3[39m,
    startTimeMinutes: [33m1080[39m,
    endTimeMinutes: [33m1680[39m,
    isActive: [33mtrue[39m,
    createdAt: [35m2025-10-15T16:56:30.359Z[39m,
    updatedAt: [35m2025-10-15T16:56:30.359Z[39m
  }
]

stdout | src/teachers/teachers.service.spec.ts > TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days
Found availabilities: []

stdout | test/package-booking.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/package-booking.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ❯ src/teachers/teachers.service.spec.ts (11 tests | 4 failed) 33ms
   ✓ TeachersService > should be defined 5ms
   ✓ TeachersService > updateTeacherAvailability > should handle rules that span midnight 3ms
   × TeachersService > updateTeacherAvailability > should handle normal rules without spanning 3ms
     → mockAvailability is not defined
   ✓ TeachersService > updateTeacherAvailability > should handle exceptions that span midnight 1ms
   ✓ TeachersService > updateTeacherAvailability > should throw NotFoundException if teacher not found 2ms
   × TeachersService > getTeacherAvailability > should return wrapped endTime for spanning rules 6ms
     → expected { timezone: 'UTC', …(2) } to deeply equal { rules: [ { id: 1, …(3) } ], …(1) }
   × TeachersService > previewTeacherAvailability > should generate correct preview windows for spanning rules 4ms
     → jest is not defined
   × TeachersService > previewTeacherAvailability > should generate correct preview windows for normal rules 1ms
     → jest is not defined
   ✓ TeachersService > previewTeacherAvailability > should handle multiple days with spanning rules 5ms
   ✓ TeachersService > previewTeacherAvailability > should throw NotFoundException if teacher not found 1ms
   ✓ TeachersService > previewTeacherAvailability > should throw BadRequestException for range exceeding 90 days 1ms
stdout | test/database-connection.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/database-connection.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/students-api.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/students-api.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/sessions/services/sessions.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/sessions/services/sessions.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/payments-session-booking.e2e.spec.ts > PaymentsService.createSessionAndBookingFromMetadata (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

[31m[Nest] 67355  - [39m10/15/2025, 10:56:31 AM [31m  ERROR[39m [38;5;3m[TypeOrmModule] [39m[31mUnable to connect to the database. Retrying (1)...[39m
SyntaxError: Invalid or unexpected token
    at compileSourceTextModule (node:internal/modules/esm/utils:346:16)
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:107:18)
    at ModuleLoader.<anonymous> (node:internal/modules/esm/translators:526:10)
    at ModuleLoader.#translate (node:internal/modules/esm/loader:536:12)
    at ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:583:27)
    at ModuleJob._link (node:internal/modules/esm/module_job:162:19)
stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | src/group-classes/group-classes.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/group-classes/group-classes.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database-connection.e2e.spec.ts > Database Connection (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/credit-tiers-integration.e2e.spec.ts > Credit Tier System Integration (e2e)
Running migrations...

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
Running migrations...

stdout | test/database-connection.e2e.spec.ts > Database Connection (e2e)
[AppModule] Loaded 28 entities directly via import

stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/group-class-booking.e2e.spec.ts > Group Class Booking (e2e)
[4mMigration "AddPasswordHashToUsers1733771000001" failed, error: Duplicate column name 'password_hash'[24m

 ❯ test/group-class-booking.e2e.spec.ts (3 tests | 3 skipped) 721ms
   ↓ Group Class Booking (e2e) > should create a group class, generate sessions, and see them as available
   ↓ Group Class Booking (e2e) > POST /bookings > should allow a student to book a group class session
   ↓ Group Class Booking (e2e) > POST /bookings > should not allow booking a full group class session
stdout | test/students-api.e2e.spec.ts > Students API (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

 ❯ test/credit-tiers-integration.e2e.spec.ts (22 tests | 22 skipped) 846ms
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return compatible packages for a private session
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return both exact and higher-tier packages for group session
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude incompatible packages (group package for private session)
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude expired packages
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should exclude packages with no remaining sessions
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should handle premium teacher sessions correctly
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 401 when not authenticated
   ↓ Credit Tier System Integration (e2e) > GET /packages/compatible-for-session/:sessionId > should return 404 for non-existent session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow booking with exact-match package
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow cross-tier booking with confirmation
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject cross-tier booking without confirmation
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking group package for private session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (60 min session, 30 min credit)
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should calculate correct credits for duration mismatch (30 min session, 60 min credit)
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking when insufficient credits
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject booking with expired package
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should reject standard package for premium teacher session
   ↓ Credit Tier System Integration (e2e) > POST /payments/book-with-package (Tier Validation) > should allow premium package for standard teacher session with confirmation
   ↓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund to original package when canceling cross-tier booking
   ↓ Credit Tier System Integration (e2e) > Cancellation Refund (Tier System) > should refund correct number of credits for duration-based booking
   ↓ Credit Tier System Integration (e2e) > Edge Cases > should handle concurrent booking attempts with last credit
   ↓ Credit Tier System Integration (e2e) > Edge Cases > should handle package with missing metadata gracefully
stdout | test/package-booking.e2e.spec.ts > Package Booking (e2e)
Running migrations...

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
Running migrations...

 ❯ test/package-booking.e2e.spec.ts (9 tests | 9 skipped) 283ms
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return student credits
   ↓ Package Booking (e2e) > GET /packages/my-credits > should return 401 when user not authenticated
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should successfully book session with package credit
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package has no remaining sessions
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 404 when package not found
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 when package is expired
   ↓ Package Booking (e2e) > POST /payments/book-with-package > should return 400 with invalid request body
   ↓ Package Booking (e2e) > POST /packages/:id/use > should successfully use package for session
   ↓ Package Booking (e2e) > Concurrency test > should handle concurrent package usage correctly
 ✓ test/database-connection.e2e.spec.ts (1 test) 738ms
stdout | src/payments/payments.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/payments/payments.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
Migrations complete.

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
MigrationTestDataSource destroyed.

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/students-api.e2e.spec.ts > Students API (e2e)
[AppModule] Loaded 28 entities directly via import

stdout | test/app.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/app.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/payments/payments.controller.spec.ts (5 tests) 30ms
stdout | test/teacher-availability.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/teacher-availability.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/waitlist.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/waitlist.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/packages/packages.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/packages/packages.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/students-api.e2e.spec.ts > Students API (e2e) > GET /api/students/me/upcoming > should return upcoming sessions with correct teacher name
StudentGuard payload: {
  sub: [32m'18989'[39m,
  email: [32m'student-1760547393752@example.com'[39m,
  name: [32m'Jane Smith'[39m,
  firstName: [32m'Jane'[39m,
  lastName: [32m'Smith'[39m,
  roles: [ [32m'student'[39m ],
  sid: [32m'test-session-1760547393764'[39m,
  type: [32m'access'[39m,
  iat: [33m1760547393[39m,
  exp: [33m1760633793[39m
}

stdout | test/students-api.e2e.spec.ts > Students API (e2e) > GET /api/students/me/upcoming > should respect limit parameter
StudentGuard payload: {
  sub: [32m'18989'[39m,
  email: [32m'student-1760547393752@example.com'[39m,
  name: [32m'Jane Smith'[39m,
  firstName: [32m'Jane'[39m,
  lastName: [32m'Smith'[39m,
  roles: [ [32m'student'[39m ],
  sid: [32m'test-session-1760547393764'[39m,
  type: [32m'access'[39m,
  iat: [33m1760547393[39m,
  exp: [33m1760633793[39m
}

stdout | test/students-api.e2e.spec.ts > Students API (e2e) > GET /api/students/me/upcoming > should return empty array for student with no upcoming sessions
StudentGuard payload: {
  sub: [32m'83082'[39m,
  email: [32m'other@example.com'[39m,
  name: [32m'Bob Wilson'[39m,
  firstName: [32m'Bob'[39m,
  lastName: [32m'Wilson'[39m,
  roles: [ [32m'student'[39m ],
  sid: [32m'test-session-id-2'[39m,
  type: [32m'access'[39m,
  iat: [33m1760547393[39m,
  exp: [33m1760633793[39m
}

 ✓ test/students-api.e2e.spec.ts (3 tests) 1212ms
stdout | src/waitlists/waitlists.service.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/waitlists/waitlists.service.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/database.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/database.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/auth-google-start.e2e.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | test/auth-google-start.e2e.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher-availability.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

 ✓ src/teachers/entities/teacher-availability.entity.spec.ts (4 tests) 5ms
stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
Running migrations...

stdout | test/app.e2e.spec.ts > AppController (e2e) > / (GET)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/app.e2e.spec.ts > AppController (e2e) > / (GET)
[AppModule] Loaded 28 entities directly via import

stdout | test/teacher-availability.e2e.spec.ts > TeacherAvailabilityService (e2e)
[4mMigration "AddAdminTable1756431459155" failed, error: Can't create table `wordpress_test`.`admin` (errno: 150 "Foreign key constraint is incorrectly formed")[24m

 ❯ test/teacher-availability.e2e.spec.ts (13 tests | 13 skipped) 123ms
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has ONE_OFF availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should validate successfully when teacher has RECURRING availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a blackout during requested time
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has a conflicting booking
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher is inactive
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher does not exist
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when teacher has no availability
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability weekday does not match
   ↓ TeacherAvailabilityService (e2e) > validateAvailability > should fail when RECURRING availability time does not match
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should correctly exclude time slots that overlap with scheduled sessions
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should include full availability when no sessions are scheduled
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should exclude time slots that overlap with blackouts
   ↓ TeacherAvailabilityService (e2e) > previewTeacherAvailability (integration) > should handle multiple teachers with different availabilities and bookings
[31m[Nest] 67355  - [39m10/15/2025, 10:56:34 AM [31m  ERROR[39m [38;5;3m[TypeOrmModule] [39m[31mUnable to connect to the database. Retrying (2)...[39m
SyntaxError: Invalid or unexpected token
    at compileSourceTextModule (node:internal/modules/esm/utils:346:16)
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:107:18)
    at ModuleLoader.<anonymous> (node:internal/modules/esm/translators:526:10)
    at ModuleLoader.#translate (node:internal/modules/esm/loader:536:12)
    at ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:583:27)
    at ModuleJob._link (node:internal/modules/esm/module_job:162:19)
 ❯ test/app.e2e.spec.ts (1 test | 1 failed) 137ms
   × AppController (e2e) > / (GET) 136ms
     → getHttpServer is not defined
stdout | src/common/types/class-types.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/common/types/class-types.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

stdout | src/teachers/entities/teacher.entity.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/teachers/entities/teacher.entity.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/common/types/class-types.spec.ts (3 tests) 4ms
stdout | src/app.controller.spec.ts
[CONFIG] Test mode detected - Using database: wordpress_test
db config: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  synchronize: [33mfalse[39m,
  logging: [33mfalse[39m,
  entities: [ [32m'dist/**/*.entity{.ts,.js}'[39m ],
  migrations: [ [32m'dist/migrations/*{.ts,.js}'[39m ]
}
[MIGRATIONS] Loaded 17 migrations directly (no file glob needed)

stdout | src/app.controller.spec.ts
[TEST SETUP] Current dir: /Users/davidcook/personal/thrive-wp/apps/nestjs
[TEST SETUP] Loading .env.test from: /Users/davidcook/personal/thrive-wp/apps/nestjs/.env.test
[TEST SETUP] dotenv result: {
  parsed: {
    DB_HOST: [32m'127.0.0.1'[39m,
    DB_PORT: [32m'3306'[39m,
    DB_USERNAME: [32m'wordpress'[39m,
    DB_PASSWORD: [32m'wordpress'[39m,
    DB_DATABASE: [32m'wordpress_test'[39m
  }
}
[TEST SETUP] DB_HOST after dotenv: 127.0.0.1
process.env.DB_HOST: 127.0.0.1
[TEST SETUP] Migration setup available. Call runMigrations() if needed.

 ✓ src/teachers/entities/teacher.entity.spec.ts (4 tests) 3ms
stdout | test/database.e2e.spec.ts > Database Integration (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

 ✓ src/app.controller.spec.ts (1 test) 7ms
stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
[CONFIG] Test mode detected - Using database: wordpress_test

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
[AppModule] Loaded 28 entities directly via import

stdout | test/database.e2e.spec.ts > Database Integration (e2e)
Running migrations...

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)

[TEST SETUP] Running database migrations...

MigrationTestDataSource.options: {
  type: [32m'mysql'[39m,
  host: [32m'127.0.0.1'[39m,
  port: [33m3306[39m,
  username: [32m'wordpress'[39m,
  password: [32m'wordpress'[39m,
  database: [32m'wordpress_test'[39m,
  entities: [],
  migrations: [
    [36m[class InitialSchema1733770000000][39m,
    [36m[class AddPasswordHashToUsers1733771000001][39m,
    [36m[class AddTeacherAndAvailability1733772000002][39m,
    [36m[class AddAdminTable1756431459155][39m,
    [36m[class AddStudentTable1756431459156][39m,
    [36m[class AddSchedulingTables1756431459157][39m,
    [36m[class AddWaitlistTable1756431459158][39m,
    [36m[class AddPricingSystemTables1756431459159][39m,
    [36m[class RenameToStripeProductMap1756431459160][39m,
    [36m[class AddDraftStatuses1756431459161][39m,
    [36m[class AddStudentPackagesTables1759000000000][39m,
    [36m[class AddPackageFieldsToBooking1759000000001][39m,
    [36m[class AddCancellationPolicies1759000000002][39m,
    [36m[class AddGroupClassesTables1759000000003][39m,
    [36m[class AddTeacherProfileFields1759000000004][39m,
    [36m[class GroupClassMultipleLevels1759000000004][39m,
    [36m[class AddCourseProgramsTables1760000000000][39m
  ],
  synchronize: [33mfalse[39m,
  dropSchema: [33mtrue[39m,
  logging: [33mfalse[39m
}
Target DB for migrations: wordpress_test
Initializing MigrationTestDataSource...

stdout | test/database.e2e.spec.ts > Database Integration (e2e)
[4mMigration "AddTeacherAndAvailability1733772000002" failed, error: Can't create table `wordpress_test`.`teacher_availability` (errno: 150 "Foreign key constraint is incorrectly formed")[24m

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
Running migrations...

 ❯ test/database.e2e.spec.ts (2 tests | 2 skipped) 134ms
   ↓ Database Integration (e2e) > should connect to test database
   ↓ Database Integration (e2e) > should have access to entities
stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
Migrations complete.

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e)
MigrationTestDataSource destroyed.

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > stores same-origin redirect path when provided as absolute URL
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): http://localhost:8080/booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE
[Google Start] redirect query param: http://localhost:8080/booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE
[Google Start] Setting cookie for domain: localhost value: /booking-confirmation/?start=2025-10-08T18:00:00.000Z&end=2025-10-08T19:00:00.000Z&teacher=1&serviceType=PRIVATE

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > preserves already-encoded query values without normalizing them
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): http://localhost:8080/booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z
[Google Start] redirect query param: http://localhost:8080/booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z
[Google Start] Setting cookie for domain: localhost value: /booking-confirmation/?times=2024-09-02T13%253A30%253A00.000Z

stdout | test/auth-google-start.e2e.spec.ts > Auth Google Start Redirect (e2e) > ignores redirects for other origins
[Google Start] WP_BASE_URL: http://localhost:8080
[Google Start] redirect query param (raw): https://malicious.example/steal
[Google Start] redirect query param: https://malicious.example/steal

 ✓ test/auth-google-start.e2e.spec.ts (3 tests) 280ms
[31m[Nest] 67355  - [39m10/15/2025, 10:56:37 AM [31m  ERROR[39m [38;5;3m[TypeOrmModule] [39m[31mUnable to connect to the database. Retrying (3)...[39m
SyntaxError: Invalid or unexpected token
    at compileSourceTextModule (node:internal/modules/esm/utils:346:16)
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:107:18)
    at ModuleLoader.<anonymous> (node:internal/modules/esm/translators:526:10)
    at ModuleLoader.#translate (node:internal/modules/esm/loader:536:12)
    at ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:583:27)
    at ModuleJob._link (node:internal/modules/esm/module_job:162:19)
