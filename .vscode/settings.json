{
  "vitest.applyDiagnostic": true,

  // Run and debug tests from VS Code matching our TS specs
  "vitest.include": ["**/*.spec.ts", "**/*.e2e.spec.ts"],

  // Point Vitest to the NestJS project config (relative to projectPath)
  "vitest.config": "vitest.config.ts",

  // Run tests via our npm script so Node flags and env (.env.test) are applied
  // Note: projectPath makes the command run inside the nestjs folder
  "vitest.commandLine": "npm run test:watch",
  "vitest.projectPath": "./nestjs",

  // Helpful defaults for DB-based e2e tests
  "vitest.runOptions": ["--runInBand", "--colors"],

  // Ensure debug runs also use Node's ESM vm modules
  "vitest.debugOptions": {
    "runtimeExecutable": "node",
    "runtimeArgs": ["--experimental-vm-modules"],
    "projectPath": "./nestjs",
    // Ensure debug runs mimic `npm run test` (which loads .env.test)
    // so TypeORM uses localhost instead of Docker hostname 'db'.
    "env": {
      "NODE_ENV": "test",
      "DB_HOST": "localhost",
      "DB_PORT": "3306",
      "DB_USERNAME": "wordpress",
      "DB_PASSWORD": "wordpress",
      "DB_DATABASE_TEST": "wordpress_test",
      "DB_SYNCHRONIZE": "false"
    }
  },

  // Ensure ESLint lints TypeScript and TSX files in the editor
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],

  // Prefer workspace TypeScript to get consistent diagnostics
  "typescript.tsdk": "./node_modules/typescript/lib",

  // Force ESLint extension to run from the repository root so it uses the root
  // node_modules and config (avoids loading nested eslint installations).
  "eslint.workingDirectories": [{ "directory": ".", "changeProcessCWD": true }]
}
